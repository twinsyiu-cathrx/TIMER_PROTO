
TIM1_Ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad8  08003ad8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ad8  08003ad8  00004ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ae0  08003ae0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ae4  08003ae4  00004ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ae8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08003b50  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003b50  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccdb  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c64  00000000  00000000  00011d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000139d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  00014698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a06  00000000  00000000  0001508f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eddd  00000000  00000000  00037a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a50  00000000  00000000  00046872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001192c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  00119308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003aa0 	.word	0x08003aa0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08003aa0 	.word	0x08003aa0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fbf9 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f83d 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f981 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f955 	bl	80007f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000546:	f000 f8a5 	bl	8000694 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4818      	ldr	r0, [pc, #96]	@ (80005b0 <main+0x80>)
 800054e:	f001 fddd 	bl	800210c <HAL_TIM_OnePulse_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t inc = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
//    uint16_t T1_EGR = TIMER1.Instance->EGR;
    // printf("EGR %u\r\n", T1_EGR);
    // TIMER1.Instance->EGR |= 0x1;  // set UG bit
    TIMER1.Instance->CR1 |= 0x1;        // trigger the pulse
 8000556:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <main+0x80>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <main+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f042 0201 	orr.w	r2, r2, #1
 8000564:	601a      	str	r2, [r3, #0]

    printf("\r\n\r\n\r\n\r\n");         // delay, to gives time for the pulse to complete before change the timer parameter
 8000566:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <main+0x84>)
 8000568:	f002 ff06 	bl	8003378 <puts>

    if(inc)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00e      	beq.n	8000590 <main+0x60>
    {
        // inc the pulse width by decrement the CCR1
        TIMER1.Instance->CCR1 -= 1;
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <main+0x80>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000578:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <main+0x80>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3a01      	subs	r2, #1
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
        if(TIMER1.Instance->CCR1 <= 10)
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <main+0x80>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000586:	2b0a      	cmp	r3, #10
 8000588:	d8e5      	bhi.n	8000556 <main+0x26>
            inc = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	e7e2      	b.n	8000556 <main+0x26>
    }
    else
    {
        // decc the pulse width by increment the CCR1
        TIMER1.Instance->CCR1 += 1;
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <main+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <main+0x80>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3201      	adds	r2, #1
 800059c:	635a      	str	r2, [r3, #52]	@ 0x34
        if(TIMER1.Instance->CCR1 >= 50)
 800059e:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <main+0x80>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a4:	2b31      	cmp	r3, #49	@ 0x31
 80005a6:	d9d6      	bls.n	8000556 <main+0x26>
            inc = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	71fb      	strb	r3, [r7, #7]
    TIMER1.Instance->CR1 |= 0x1;        // trigger the pulse
 80005ac:	e7d3      	b.n	8000556 <main+0x26>
 80005ae:	bf00      	nop
 80005b0:	20000084 	.word	0x20000084
 80005b4:	08003ab8 	.word	0x08003ab8

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	@ 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ffb6 	bl	8003538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a29      	ldr	r2, [pc, #164]	@ (800068c <SystemClock_Config+0xd4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b27      	ldr	r3, [pc, #156]	@ (800068c <SystemClock_Config+0xd4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <SystemClock_Config+0xd8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f9c0 	bl	80019cc <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000652:	f000 f965 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe60 	bl	8001338 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067e:	f000 f94f 	bl	8000920 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800069a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2220      	movs	r2, #32
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 ff32 	bl	8003538 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006d6:	4a45      	ldr	r2, [pc, #276]	@ (80007ec <MX_TIM1_Init+0x158>)
 80006d8:	601a      	str	r2, [r3, #0]
//  htim1.Init.Prescaler = 84-1;    // [1us timebase]
  htim1.Init.Prescaler = 21-1;      // 0.25us timebase
 80006da:	4b43      	ldr	r3, [pc, #268]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006dc:	2214      	movs	r2, #20
 80006de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  // htim1.Init.Period = 50000-1;   max pulse width is 50ms [@1us timebase]; this is ARR, ie ARR = 50000
  htim1.Init.Period = 50-1;         // try max pulse width is 50us [@1us timebase] or 12.5us [@0.25us timebase]
 80006e6:	4b40      	ldr	r3, [pc, #256]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006e8:	2231      	movs	r2, #49	@ 0x31
 80006ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f2:	4b3d      	ldr	r3, [pc, #244]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f8:	4b3b      	ldr	r3, [pc, #236]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fe:	483a      	ldr	r0, [pc, #232]	@ (80007e8 <MX_TIM1_Init+0x154>)
 8000700:	f001 fc02 	bl	8001f08 <HAL_TIM_Base_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800070a:	f000 f909 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800070e:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <MX_TIM1_Init+0x154>)
 8000710:	f001 fc49 	bl	8001fa6 <HAL_TIM_OC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800071a:	f000 f901 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800071e:	2108      	movs	r1, #8
 8000720:	4831      	ldr	r0, [pc, #196]	@ (80007e8 <MX_TIM1_Init+0x154>)
 8000722:	f001 fc99 	bl	8002058 <HAL_TIM_OnePulse_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800072c:	f000 f8f8 	bl	8000920 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000730:	2306      	movs	r3, #6
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000734:	2360      	movs	r3, #96	@ 0x60
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000738:	2300      	movs	r3, #0
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sSlaveConfig.TriggerFilter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000740:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000744:	4619      	mov	r1, r3
 8000746:	4828      	ldr	r0, [pc, #160]	@ (80007e8 <MX_TIM1_Init+0x154>)
 8000748:	f001 fd9e 	bl	8002288 <HAL_TIM_SlaveConfigSynchro>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000752:	f000 f8e5 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000762:	4619      	mov	r1, r3
 8000764:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <MX_TIM1_Init+0x154>)
 8000766:	f002 f95d 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000770:	f000 f8d6 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000774:	2370      	movs	r3, #112	@ 0x70
 8000776:	623b      	str	r3, [r7, #32]
  // sConfigOC.Pulse = 10000;   // 10ms [@1us timebase] delay from trigger to pulse; this is CCR, CCR = 10000, actual pulse width is ARR - CCR
  sConfigOC.Pulse = 10;         // try 10us [@1us timebase] or 0.25us[@0.25us timebase] delay from trigger to pulse,
 8000778:	230a      	movs	r3, #10
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
                                // so pulse width is 50 - 10 = 40us[@1us timebase]
                                // or pulse width is 50 - 10 = 10us[@0.25us timebase]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4813      	ldr	r0, [pc, #76]	@ (80007e8 <MX_TIM1_Init+0x154>)
 800079a:	f001 fd19 	bl	80021d0 <HAL_TIM_OC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007a4:	f000 f8bc 	bl	8000920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80007cc:	f002 f9a6 	bl	8002b1c <HAL_TIMEx_ConfigBreakDeadTime>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80007d6:	f000 f8a3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007da:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <MX_TIM1_Init+0x154>)
 80007dc:	f000 f916 	bl	8000a0c <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3758      	adds	r7, #88	@ 0x58
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000084 	.word	0x20000084
 80007ec:	40010000 	.word	0x40010000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f002 f9ca 	bl	8002bc0 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f875 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000cc 	.word	0x200000cc
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a2c      	ldr	r2, [pc, #176]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	4812      	ldr	r0, [pc, #72]	@ (8000918 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 fd18 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_GPIO_Init+0xd8>)
 80008ec:	f000 fb76 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_GPIO_Init+0xd4>)
 8000908:	f000 fb68 	bl	8000fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020800 	.word	0x40020800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fb02 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_TIM_Base_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_TIM_Base_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_TIM_Base_MspInit+0x8c>)
 80009f4:	f000 faf2 	bl	8000fdc <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40010000 	.word	0x40010000
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_TIM_MspPostInit+0x68>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d11e      	bne.n	8000a6c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_TIM_MspPostInit+0x6c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	@ (8000a78 <HAL_TIM_MspPostInit+0x6c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_TIM_MspPostInit+0x6c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <HAL_TIM_MspPostInit+0x70>)
 8000a68:	f000 fab8 	bl	8000fdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40010000 	.word	0x40010000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_UART_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12b      	bne.n	8000afa <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_UART_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_UART_MspInit+0x8c>)
 8000af6:	f000 fa71 	bl	8000fdc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f933 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e00a      	b.n	8000b96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b80:	f3af 8000 	nop.w
 8000b84:	4601      	mov	r1, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbf0      	blt.n	8000b80 <_read+0x12>
  }

  return len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e009      	b.n	8000bce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	60ba      	str	r2, [r7, #8]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dbf1      	blt.n	8000bba <_write+0x12>
  }
  return len;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_close>:

int _close(int file)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c08:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_isatty>:

int _isatty(int file)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f002 fcac 	bl	80035d4 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20020000 	.word	0x20020000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	20000114 	.word	0x20000114
 8000cb0:	20000268 	.word	0x20000268

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f002 fc6b 	bl	80035e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc11 	bl	8000530 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d1c:	08003ae8 	.word	0x08003ae8
  ldr r2, =_sbss
 8000d20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d24:	20000268 	.word	0x20000268

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f90d 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fde4 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f917 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8ed 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	@ (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000118 	.word	0x20000118

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000118 	.word	0x20000118

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	@ (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	@ 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e165      	b.n	80012c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8154 	bne.w	80012be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80ae 	beq.w	80012be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <HAL_GPIO_Init+0x300>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a5c      	ldr	r2, [pc, #368]	@ (80012dc <HAL_GPIO_Init+0x300>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b5a      	ldr	r3, [pc, #360]	@ (80012dc <HAL_GPIO_Init+0x300>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a58      	ldr	r2, [pc, #352]	@ (80012e0 <HAL_GPIO_Init+0x304>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	@ (80012e4 <HAL_GPIO_Init+0x308>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	@ (80012e8 <HAL_GPIO_Init+0x30c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	@ (80012ec <HAL_GPIO_Init+0x310>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	@ (80012f0 <HAL_GPIO_Init+0x314>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	@ (80012f4 <HAL_GPIO_Init+0x318>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	@ (80012f8 <HAL_GPIO_Init+0x31c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	@ (80012fc <HAL_GPIO_Init+0x320>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x202>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	@ (80012e0 <HAL_GPIO_Init+0x304>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <HAL_GPIO_Init+0x324>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a31      	ldr	r2, [pc, #196]	@ (8001300 <HAL_GPIO_Init+0x324>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b2f      	ldr	r3, [pc, #188]	@ (8001300 <HAL_GPIO_Init+0x324>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <HAL_GPIO_Init+0x324>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126a:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <HAL_GPIO_Init+0x324>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <HAL_GPIO_Init+0x324>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_GPIO_Init+0x324>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_GPIO_Init+0x324>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae96 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0cc      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b68      	ldr	r3, [pc, #416]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d90c      	bls.n	8001374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b65      	ldr	r3, [pc, #404]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0b8      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138c:	4b59      	ldr	r3, [pc, #356]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a58      	ldr	r2, [pc, #352]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a4:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a52      	ldr	r2, [pc, #328]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	4b50      	ldr	r3, [pc, #320]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	494d      	ldr	r1, [pc, #308]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d044      	beq.n	8001458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b47      	ldr	r3, [pc, #284]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d119      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e07f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e067      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4934      	ldr	r1, [pc, #208]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fce6 	bl	8000df8 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff fce2 	bl	8000df8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e04f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001458:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d20c      	bcs.n	8001480 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e032      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4916      	ldr	r1, [pc, #88]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	490e      	ldr	r1, [pc, #56]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014be:	f000 f855 	bl	800156c <HAL_RCC_GetSysClockFreq>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	490a      	ldr	r1, [pc, #40]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	5ccb      	ldrb	r3, [r1, r3]
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_ClockConfig+0x1c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc46 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08003ac0 	.word	0x08003ac0
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <HAL_RCC_GetHCLKFreq+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001520:	f7ff fff0 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4903      	ldr	r1, [pc, #12]	@ (8001540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	08003ad0 	.word	0x08003ad0

08001544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001548:	f7ff ffdc 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	0b5b      	lsrs	r3, r3, #13
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	4903      	ldr	r1, [pc, #12]	@ (8001568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	08003ad0 	.word	0x08003ad0

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001570:	b0ae      	sub	sp, #184	@ 0xb8
 8001572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001592:	4bcb      	ldr	r3, [pc, #812]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b0c      	cmp	r3, #12
 800159c:	f200 8206 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x440>
 80015a0:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015dd 	.word	0x080015dd
 80015ac:	080019ad 	.word	0x080019ad
 80015b0:	080019ad 	.word	0x080019ad
 80015b4:	080019ad 	.word	0x080019ad
 80015b8:	080015e5 	.word	0x080015e5
 80015bc:	080019ad 	.word	0x080019ad
 80015c0:	080019ad 	.word	0x080019ad
 80015c4:	080019ad 	.word	0x080019ad
 80015c8:	080015ed 	.word	0x080015ed
 80015cc:	080019ad 	.word	0x080019ad
 80015d0:	080019ad 	.word	0x080019ad
 80015d4:	080019ad 	.word	0x080019ad
 80015d8:	080017dd 	.word	0x080017dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015dc:	4bb9      	ldr	r3, [pc, #740]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015e2:	e1e7      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e4:	4bb8      	ldr	r3, [pc, #736]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ea:	e1e3      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4bb4      	ldr	r3, [pc, #720]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f8:	4bb1      	ldr	r3, [pc, #708]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d071      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4bae      	ldr	r3, [pc, #696]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001610:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800162a:	4622      	mov	r2, r4
 800162c:	462b      	mov	r3, r5
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0159      	lsls	r1, r3, #5
 8001638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800163c:	0150      	lsls	r0, r2, #5
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4621      	mov	r1, r4
 8001644:	1a51      	subs	r1, r2, r1
 8001646:	6439      	str	r1, [r7, #64]	@ 0x40
 8001648:	4629      	mov	r1, r5
 800164a:	eb63 0301 	sbc.w	r3, r3, r1
 800164e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800165c:	4649      	mov	r1, r9
 800165e:	018b      	lsls	r3, r1, #6
 8001660:	4641      	mov	r1, r8
 8001662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001666:	4641      	mov	r1, r8
 8001668:	018a      	lsls	r2, r1, #6
 800166a:	4641      	mov	r1, r8
 800166c:	1a51      	subs	r1, r2, r1
 800166e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001670:	4649      	mov	r1, r9
 8001672:	eb63 0301 	sbc.w	r3, r3, r1
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001684:	4649      	mov	r1, r9
 8001686:	00cb      	lsls	r3, r1, #3
 8001688:	4641      	mov	r1, r8
 800168a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800168e:	4641      	mov	r1, r8
 8001690:	00ca      	lsls	r2, r1, #3
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	4603      	mov	r3, r0
 8001698:	4622      	mov	r2, r4
 800169a:	189b      	adds	r3, r3, r2
 800169c:	633b      	str	r3, [r7, #48]	@ 0x30
 800169e:	462b      	mov	r3, r5
 80016a0:	460a      	mov	r2, r1
 80016a2:	eb42 0303 	adc.w	r3, r2, r3
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016b4:	4629      	mov	r1, r5
 80016b6:	024b      	lsls	r3, r1, #9
 80016b8:	4621      	mov	r1, r4
 80016ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016be:	4621      	mov	r1, r4
 80016c0:	024a      	lsls	r2, r1, #9
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ca:	2200      	movs	r2, #0
 80016cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016d8:	f7fe fd94 	bl	8000204 <__aeabi_uldivmod>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4613      	mov	r3, r2
 80016e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016e6:	e067      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e8:	4b75      	ldr	r3, [pc, #468]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001700:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001702:	2300      	movs	r3, #0
 8001704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001706:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800170a:	4622      	mov	r2, r4
 800170c:	462b      	mov	r3, r5
 800170e:	f04f 0000 	mov.w	r0, #0
 8001712:	f04f 0100 	mov.w	r1, #0
 8001716:	0159      	lsls	r1, r3, #5
 8001718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800171c:	0150      	lsls	r0, r2, #5
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4621      	mov	r1, r4
 8001724:	1a51      	subs	r1, r2, r1
 8001726:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001728:	4629      	mov	r1, r5
 800172a:	eb63 0301 	sbc.w	r3, r3, r1
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800173c:	4649      	mov	r1, r9
 800173e:	018b      	lsls	r3, r1, #6
 8001740:	4641      	mov	r1, r8
 8001742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001746:	4641      	mov	r1, r8
 8001748:	018a      	lsls	r2, r1, #6
 800174a:	4641      	mov	r1, r8
 800174c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001750:	4649      	mov	r1, r9
 8001752:	eb63 0b01 	sbc.w	fp, r3, r1
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800176a:	4692      	mov	sl, r2
 800176c:	469b      	mov	fp, r3
 800176e:	4623      	mov	r3, r4
 8001770:	eb1a 0303 	adds.w	r3, sl, r3
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	462b      	mov	r3, r5
 8001778:	eb4b 0303 	adc.w	r3, fp, r3
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800178a:	4629      	mov	r1, r5
 800178c:	028b      	lsls	r3, r1, #10
 800178e:	4621      	mov	r1, r4
 8001790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001794:	4621      	mov	r1, r4
 8001796:	028a      	lsls	r2, r1, #10
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a0:	2200      	movs	r2, #0
 80017a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80017a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017aa:	f7fe fd2b 	bl	8000204 <__aeabi_uldivmod>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4613      	mov	r3, r2
 80017b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017b8:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	3301      	adds	r3, #1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017da:	e0eb      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e8:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d06b      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f4:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	2200      	movs	r2, #0
 80017fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001806:	663b      	str	r3, [r7, #96]	@ 0x60
 8001808:	2300      	movs	r3, #0
 800180a:	667b      	str	r3, [r7, #100]	@ 0x64
 800180c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001810:	4622      	mov	r2, r4
 8001812:	462b      	mov	r3, r5
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	0159      	lsls	r1, r3, #5
 800181e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001822:	0150      	lsls	r0, r2, #5
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4621      	mov	r1, r4
 800182a:	1a51      	subs	r1, r2, r1
 800182c:	61b9      	str	r1, [r7, #24]
 800182e:	4629      	mov	r1, r5
 8001830:	eb63 0301 	sbc.w	r3, r3, r1
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001842:	4659      	mov	r1, fp
 8001844:	018b      	lsls	r3, r1, #6
 8001846:	4651      	mov	r1, sl
 8001848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800184c:	4651      	mov	r1, sl
 800184e:	018a      	lsls	r2, r1, #6
 8001850:	4651      	mov	r1, sl
 8001852:	ebb2 0801 	subs.w	r8, r2, r1
 8001856:	4659      	mov	r1, fp
 8001858:	eb63 0901 	sbc.w	r9, r3, r1
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800186c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001870:	4690      	mov	r8, r2
 8001872:	4699      	mov	r9, r3
 8001874:	4623      	mov	r3, r4
 8001876:	eb18 0303 	adds.w	r3, r8, r3
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	462b      	mov	r3, r5
 800187e:	eb49 0303 	adc.w	r3, r9, r3
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001890:	4629      	mov	r1, r5
 8001892:	024b      	lsls	r3, r1, #9
 8001894:	4621      	mov	r1, r4
 8001896:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800189a:	4621      	mov	r1, r4
 800189c:	024a      	lsls	r2, r1, #9
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018a6:	2200      	movs	r2, #0
 80018a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018b0:	f7fe fca8 	bl	8000204 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018be:	e065      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x420>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018cc:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	2200      	movs	r2, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	4611      	mov	r1, r2
 80018d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80018de:	2300      	movs	r3, #0
 80018e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80018e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018e6:	4642      	mov	r2, r8
 80018e8:	464b      	mov	r3, r9
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	0159      	lsls	r1, r3, #5
 80018f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f8:	0150      	lsls	r0, r2, #5
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4641      	mov	r1, r8
 8001900:	1a51      	subs	r1, r2, r1
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	4649      	mov	r1, r9
 8001906:	eb63 0301 	sbc.w	r3, r3, r1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001918:	4659      	mov	r1, fp
 800191a:	018b      	lsls	r3, r1, #6
 800191c:	4651      	mov	r1, sl
 800191e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001922:	4651      	mov	r1, sl
 8001924:	018a      	lsls	r2, r1, #6
 8001926:	4651      	mov	r1, sl
 8001928:	1a54      	subs	r4, r2, r1
 800192a:	4659      	mov	r1, fp
 800192c:	eb63 0501 	sbc.w	r5, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	00eb      	lsls	r3, r5, #3
 800193a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	18e3      	adds	r3, r4, r3
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	464b      	mov	r3, r9
 800194c:	eb45 0303 	adc.w	r3, r5, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195e:	4629      	mov	r1, r5
 8001960:	028b      	lsls	r3, r1, #10
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001968:	4621      	mov	r1, r4
 800196a:	028a      	lsls	r2, r1, #10
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001974:	2200      	movs	r2, #0
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001978:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800197a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800197e:	f7fe fc41 	bl	8000204 <__aeabi_uldivmod>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4613      	mov	r3, r2
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0f1b      	lsrs	r3, r3, #28
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800199a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800199e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019aa:	e003      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	37b8      	adds	r7, #184	@ 0xb8
 80019bc:	46bd      	mov	sp, r7
 80019be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	00f42400 	.word	0x00f42400

080019cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e28d      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8083 	beq.w	8001af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019ec:	4b94      	ldr	r3, [pc, #592]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d019      	beq.n	8001a2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019f8:	4b91      	ldr	r3, [pc, #580]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a04:	4b8e      	ldr	r3, [pc, #568]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a10:	d00c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b8b      	ldr	r3, [pc, #556]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d112      	bne.n	8001a44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b84      	ldr	r3, [pc, #528]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d05b      	beq.n	8001af0 <HAL_RCC_OscConfig+0x124>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d157      	bne.n	8001af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e25a      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x90>
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7b      	ldr	r2, [pc, #492]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xcc>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xb4>
 8001a66:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a72      	ldr	r2, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xcc>
 8001a80:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6e      	ldr	r2, [pc, #440]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6b      	ldr	r2, [pc, #428]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9aa 	bl	8000df8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f9a6 	bl	8000df8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e21f      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b61      	ldr	r3, [pc, #388]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xdc>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f996 	bl	8000df8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f992 	bl	8000df8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e20b      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x104>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d06f      	beq.n	8001bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001afe:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d017      	beq.n	8001b3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b16:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b44      	ldr	r3, [pc, #272]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x186>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1d3      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4937      	ldr	r1, [pc, #220]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e03a      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b34      	ldr	r3, [pc, #208]	@ (8001c44 <HAL_RCC_OscConfig+0x278>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f93f 	bl	8000df8 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f93b 	bl	8000df8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1b4      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4925      	ldr	r1, [pc, #148]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <HAL_RCC_OscConfig+0x278>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f91e 	bl	8000df8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f91a 	bl	8000df8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e193      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f8fe 	bl	8000df8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff f8fa 	bl	8000df8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e173      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x234>
 8001c1e:	e01b      	b.n	8001c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f8e7 	bl	8000df8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00e      	b.n	8001c4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f8e3 	bl	8000df8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d907      	bls.n	8001c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e15c      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470000 	.word	0x42470000
 8001c48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ea      	bne.n	8001c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8097 	beq.w	8001d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b83      	ldr	r3, [pc, #524]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b7c      	ldr	r3, [pc, #496]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b79      	ldr	r3, [pc, #484]	@ (8001e7c <HAL_RCC_OscConfig+0x4b0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b76      	ldr	r3, [pc, #472]	@ (8001e7c <HAL_RCC_OscConfig+0x4b0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	@ (8001e7c <HAL_RCC_OscConfig+0x4b0>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f8a3 	bl	8000df8 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff f89f 	bl	8000df8 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e118      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e7c <HAL_RCC_OscConfig+0x4b0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x31e>
 8001cdc:	4b66      	ldr	r3, [pc, #408]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce0:	4a65      	ldr	r2, [pc, #404]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x358>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x340>
 8001cf2:	4b61      	ldr	r3, [pc, #388]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	4a60      	ldr	r2, [pc, #384]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a5d      	ldr	r2, [pc, #372]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x358>
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	4a59      	ldr	r2, [pc, #356]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d18:	4b57      	ldr	r3, [pc, #348]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	4a56      	ldr	r2, [pc, #344]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f864 	bl	8000df8 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f860 	bl	8000df8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0d7      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ee      	beq.n	8001d34 <HAL_RCC_OscConfig+0x368>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f84e 	bl	8000df8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f84a 	bl	8000df8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0c1      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d76:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ad 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9e:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d060      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d145      	bne.n	8001e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_OscConfig+0x4b4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f81e 	bl	8000df8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f81a 	bl	8000df8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e093      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	071b      	lsls	r3, r3, #28
 8001e0a:	491b      	ldr	r1, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4b4>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe ffef 	bl	8000df8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe ffeb 	bl	8000df8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e064      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x452>
 8001e3c:	e05c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_RCC_OscConfig+0x4b4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe ffd8 	bl	8000df8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe ffd4 	bl	8000df8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04d      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x480>
 8001e6a:	e045      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e040      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_RCC_OscConfig+0x538>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d122      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fd24 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 f9e0 	bl	800230c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e041      	b.n	800203c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f839 	bl	8002044 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f000 f991 	bl	800230c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e041      	b.n	80020f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f839 	bl	80020f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f000 f937 	bl	800230c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800211c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002124:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800212c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002134:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002142:	7b7b      	ldrb	r3, [r7, #13]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e035      	b.n	80021be <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fc2c 	bl	80029d8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	2104      	movs	r1, #4
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fc25 	bl	80029d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_TIM_OnePulse_Start+0xbc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_TIM_OnePulse_Start+0x96>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <HAL_TIM_OnePulse_Start+0xc0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_OnePulse_Start+0x9a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_TIM_OnePulse_Start+0x9c>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e048      	b.n	8002280 <HAL_TIM_OC_ConfigChannel+0xb0>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d839      	bhi.n	8002270 <HAL_TIM_OC_ConfigChannel+0xa0>
 80021fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <HAL_TIM_OC_ConfigChannel+0x34>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002239 	.word	0x08002239
 8002208:	08002271 	.word	0x08002271
 800220c:	08002271 	.word	0x08002271
 8002210:	08002271 	.word	0x08002271
 8002214:	08002247 	.word	0x08002247
 8002218:	08002271 	.word	0x08002271
 800221c:	08002271 	.word	0x08002271
 8002220:	08002271 	.word	0x08002271
 8002224:	08002255 	.word	0x08002255
 8002228:	08002271 	.word	0x08002271
 800222c:	08002271 	.word	0x08002271
 8002230:	08002271 	.word	0x08002271
 8002234:	08002263 	.word	0x08002263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f90a 	bl	8002458 <TIM_OC1_SetConfig>
      break;
 8002244:	e017      	b.n	8002276 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f973 	bl	8002538 <TIM_OC2_SetConfig>
      break;
 8002252:	e010      	b.n	8002276 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f9e2 	bl	8002624 <TIM_OC3_SetConfig>
      break;
 8002260:	e009      	b.n	8002276 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fa4f 	bl	800270c <TIM_OC4_SetConfig>
      break;
 800226e:	e002      	b.n	8002276 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	75fb      	strb	r3, [r7, #23]
      break;
 8002274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800229c:	2302      	movs	r3, #2
 800229e:	e031      	b.n	8002304 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa80 	bl	80027b8 <TIM_SlaveTimer_SetConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e018      	b.n	8002304 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a43      	ldr	r2, [pc, #268]	@ (800242c <TIM_Base_SetConfig+0x120>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d013      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232a:	d00f      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a40      	ldr	r2, [pc, #256]	@ (8002430 <TIM_Base_SetConfig+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00b      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3f      	ldr	r2, [pc, #252]	@ (8002434 <TIM_Base_SetConfig+0x128>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3e      	ldr	r2, [pc, #248]	@ (8002438 <TIM_Base_SetConfig+0x12c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3d      	ldr	r2, [pc, #244]	@ (800243c <TIM_Base_SetConfig+0x130>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d108      	bne.n	800235e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a32      	ldr	r2, [pc, #200]	@ (800242c <TIM_Base_SetConfig+0x120>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236c:	d027      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <TIM_Base_SetConfig+0x124>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d023      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2e      	ldr	r2, [pc, #184]	@ (8002434 <TIM_Base_SetConfig+0x128>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2d      	ldr	r2, [pc, #180]	@ (8002438 <TIM_Base_SetConfig+0x12c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <TIM_Base_SetConfig+0x130>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d017      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <TIM_Base_SetConfig+0x134>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2a      	ldr	r2, [pc, #168]	@ (8002444 <TIM_Base_SetConfig+0x138>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00f      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a29      	ldr	r2, [pc, #164]	@ (8002448 <TIM_Base_SetConfig+0x13c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a28      	ldr	r2, [pc, #160]	@ (800244c <TIM_Base_SetConfig+0x140>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a27      	ldr	r2, [pc, #156]	@ (8002450 <TIM_Base_SetConfig+0x144>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a26      	ldr	r2, [pc, #152]	@ (8002454 <TIM_Base_SetConfig+0x148>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <TIM_Base_SetConfig+0x120>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <TIM_Base_SetConfig+0xf2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a10      	ldr	r2, [pc, #64]	@ (800243c <TIM_Base_SetConfig+0x130>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d103      	bne.n	8002406 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f043 0204 	orr.w	r2, r3, #4
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40010400 	.word	0x40010400
 8002440:	40014000 	.word	0x40014000
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800
 800244c:	40001800 	.word	0x40001800
 8002450:	40001c00 	.word	0x40001c00
 8002454:	40002000 	.word	0x40002000

08002458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 0201 	bic.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f023 0302 	bic.w	r3, r3, #2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a20      	ldr	r2, [pc, #128]	@ (8002530 <TIM_OC1_SetConfig+0xd8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_OC1_SetConfig+0x64>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <TIM_OC1_SetConfig+0xdc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10c      	bne.n	80024d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0308 	bic.w	r3, r3, #8
 80024c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <TIM_OC1_SetConfig+0xd8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <TIM_OC1_SetConfig+0x8e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <TIM_OC1_SetConfig+0xdc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40010000 	.word	0x40010000
 8002534:	40010400 	.word	0x40010400

08002538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f023 0210 	bic.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0320 	bic.w	r3, r3, #32
 8002582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a22      	ldr	r2, [pc, #136]	@ (800261c <TIM_OC2_SetConfig+0xe4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_OC2_SetConfig+0x68>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a21      	ldr	r2, [pc, #132]	@ (8002620 <TIM_OC2_SetConfig+0xe8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10d      	bne.n	80025bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a17      	ldr	r2, [pc, #92]	@ (800261c <TIM_OC2_SetConfig+0xe4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <TIM_OC2_SetConfig+0x94>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a16      	ldr	r2, [pc, #88]	@ (8002620 <TIM_OC2_SetConfig+0xe8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d113      	bne.n	80025f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	621a      	str	r2, [r3, #32]
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40010400 	.word	0x40010400

08002624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800266c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <TIM_OC3_SetConfig+0xe0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_OC3_SetConfig+0x66>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a20      	ldr	r2, [pc, #128]	@ (8002708 <TIM_OC3_SetConfig+0xe4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10d      	bne.n	80026a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <TIM_OC3_SetConfig+0xe0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d003      	beq.n	80026b6 <TIM_OC3_SetConfig+0x92>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <TIM_OC3_SetConfig+0xe4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d113      	bne.n	80026de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40010000 	.word	0x40010000
 8002708:	40010400 	.word	0x40010400

0800270c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	031b      	lsls	r3, r3, #12
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <TIM_OC4_SetConfig+0xa4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_OC4_SetConfig+0x68>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a11      	ldr	r2, [pc, #68]	@ (80027b4 <TIM_OC4_SetConfig+0xa8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d109      	bne.n	8002788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800277a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40010400 	.word	0x40010400

080027b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f023 0307 	bic.w	r3, r3, #7
 80027e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b70      	cmp	r3, #112	@ 0x70
 8002800:	d01a      	beq.n	8002838 <TIM_SlaveTimer_SetConfig+0x80>
 8002802:	2b70      	cmp	r3, #112	@ 0x70
 8002804:	d860      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002806:	2b60      	cmp	r3, #96	@ 0x60
 8002808:	d054      	beq.n	80028b4 <TIM_SlaveTimer_SetConfig+0xfc>
 800280a:	2b60      	cmp	r3, #96	@ 0x60
 800280c:	d85c      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 800280e:	2b50      	cmp	r3, #80	@ 0x50
 8002810:	d046      	beq.n	80028a0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002812:	2b50      	cmp	r3, #80	@ 0x50
 8002814:	d858      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002816:	2b40      	cmp	r3, #64	@ 0x40
 8002818:	d019      	beq.n	800284e <TIM_SlaveTimer_SetConfig+0x96>
 800281a:	2b40      	cmp	r3, #64	@ 0x40
 800281c:	d854      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 800281e:	2b30      	cmp	r3, #48	@ 0x30
 8002820:	d055      	beq.n	80028ce <TIM_SlaveTimer_SetConfig+0x116>
 8002822:	2b30      	cmp	r3, #48	@ 0x30
 8002824:	d850      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002826:	2b20      	cmp	r3, #32
 8002828:	d051      	beq.n	80028ce <TIM_SlaveTimer_SetConfig+0x116>
 800282a:	2b20      	cmp	r3, #32
 800282c:	d84c      	bhi.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04d      	beq.n	80028ce <TIM_SlaveTimer_SetConfig+0x116>
 8002832:	2b10      	cmp	r3, #16
 8002834:	d04b      	beq.n	80028ce <TIM_SlaveTimer_SetConfig+0x116>
 8002836:	e047      	b.n	80028c8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	f000 f8a6 	bl	8002998 <TIM_ETR_SetConfig>
      break;
 800284c:	e040      	b.n	80028d0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d101      	bne.n	800285a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e03b      	b.n	80028d2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002880:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	621a      	str	r2, [r3, #32]
      break;
 800289e:	e017      	b.n	80028d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ac:	461a      	mov	r2, r3
 80028ae:	f000 f814 	bl	80028da <TIM_TI1_ConfigInputStage>
      break;
 80028b2:	e00d      	b.n	80028d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c0:	461a      	mov	r2, r3
 80028c2:	f000 f839 	bl	8002938 <TIM_TI2_ConfigInputStage>
      break;
 80028c6:	e003      	b.n	80028d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e000      	b.n	80028d0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80028ce:	bf00      	nop
  }

  return status;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028da:	b480      	push	{r7}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 0201 	bic.w	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 030a 	bic.w	r3, r3, #10
 8002916:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2201      	movs	r2, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e05a      	b.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d01d      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	@ (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40010400 	.word	0x40010400
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40001800 	.word	0x40001800

08002b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e03d      	b.n	8002bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e042      	b.n	8002c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd ff4a 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	@ 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f82b 	bl	8002c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b0c0      	sub	sp, #256	@ 0x100
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	ea40 0301 	orr.w	r3, r0, r1
 8002c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cb8:	f021 010c 	bic.w	r1, r1, #12
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	6999      	ldr	r1, [r3, #24]
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	ea40 0301 	orr.w	r3, r0, r1
 8002ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b8f      	ldr	r3, [pc, #572]	@ (8002f2c <UART_SetConfig+0x2cc>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d005      	beq.n	8002d00 <UART_SetConfig+0xa0>
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002f30 <UART_SetConfig+0x2d0>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d104      	bne.n	8002d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d00:	f7fe fc20 	bl	8001544 <HAL_RCC_GetPCLK2Freq>
 8002d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d08:	e003      	b.n	8002d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d0a:	f7fe fc07 	bl	800151c <HAL_RCC_GetPCLK1Freq>
 8002d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d1c:	f040 810c 	bne.w	8002f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d32:	4622      	mov	r2, r4
 8002d34:	462b      	mov	r3, r5
 8002d36:	1891      	adds	r1, r2, r2
 8002d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d3a:	415b      	adcs	r3, r3
 8002d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d42:	4621      	mov	r1, r4
 8002d44:	eb12 0801 	adds.w	r8, r2, r1
 8002d48:	4629      	mov	r1, r5
 8002d4a:	eb43 0901 	adc.w	r9, r3, r1
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	eb18 0303 	adds.w	r3, r8, r3
 8002d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d70:	462b      	mov	r3, r5
 8002d72:	eb49 0303 	adc.w	r3, r9, r3
 8002d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d8e:	460b      	mov	r3, r1
 8002d90:	18db      	adds	r3, r3, r3
 8002d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d94:	4613      	mov	r3, r2
 8002d96:	eb42 0303 	adc.w	r3, r2, r3
 8002d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002da4:	f7fd fa2e 	bl	8000204 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4b61      	ldr	r3, [pc, #388]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011c      	lsls	r4, r3, #4
 8002db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	1891      	adds	r1, r2, r2
 8002dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dd0:	415b      	adcs	r3, r3
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	4641      	mov	r1, r8
 8002dda:	eb12 0a01 	adds.w	sl, r2, r1
 8002dde:	4649      	mov	r1, r9
 8002de0:	eb43 0b01 	adc.w	fp, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df8:	4692      	mov	sl, r2
 8002dfa:	469b      	mov	fp, r3
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8002e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e06:	464b      	mov	r3, r9
 8002e08:	eb4b 0303 	adc.w	r3, fp, r3
 8002e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e24:	460b      	mov	r3, r1
 8002e26:	18db      	adds	r3, r3, r3
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e3a:	f7fd f9e3 	bl	8000204 <__aeabi_uldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	4b3b      	ldr	r3, [pc, #236]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002e46:	fba3 2301 	umull	r2, r3, r3, r1
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2264      	movs	r2, #100	@ 0x64
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	1acb      	subs	r3, r1, r3
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e5a:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e68:	441c      	add	r4, r3
 8002e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e84:	415b      	adcs	r3, r3
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	1851      	adds	r1, r2, r1
 8002e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e92:	4649      	mov	r1, r9
 8002e94:	414b      	adcs	r3, r1
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	00cb      	lsls	r3, r1, #3
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eae:	4651      	mov	r1, sl
 8002eb0:	00ca      	lsls	r2, r1, #3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4642      	mov	r2, r8
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	18db      	adds	r3, r3, r3
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ef6:	f7fd f985 	bl	8000204 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	@ 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3332      	adds	r3, #50	@ 0x32
 8002f12:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4422      	add	r2, r4
 8002f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f28:	e106      	b.n	8003138 <UART_SetConfig+0x4d8>
 8002f2a:	bf00      	nop
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	6239      	str	r1, [r7, #32]
 8002f52:	415b      	adcs	r3, r3
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	1854      	adds	r4, r2, r1
 8002f5e:	4649      	mov	r1, r9
 8002f60:	eb43 0501 	adc.w	r5, r3, r1
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	00eb      	lsls	r3, r5, #3
 8002f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	18e3      	adds	r3, r4, r3
 8002f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f80:	464b      	mov	r3, r9
 8002f82:	eb45 0303 	adc.w	r3, r5, r3
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	008b      	lsls	r3, r1, #2
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	008a      	lsls	r2, r1, #2
 8002fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fb8:	f7fd f924 	bl	8000204 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b60      	ldr	r3, [pc, #384]	@ (8003144 <UART_SetConfig+0x4e4>)
 8002fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	011c      	lsls	r4, r3, #4
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	61b9      	str	r1, [r7, #24]
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fec:	4641      	mov	r1, r8
 8002fee:	1851      	adds	r1, r2, r1
 8002ff0:	6139      	str	r1, [r7, #16]
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	414b      	adcs	r3, r1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003004:	4659      	mov	r1, fp
 8003006:	00cb      	lsls	r3, r1, #3
 8003008:	4651      	mov	r1, sl
 800300a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300e:	4651      	mov	r1, sl
 8003010:	00ca      	lsls	r2, r1, #3
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	4603      	mov	r3, r0
 8003018:	4642      	mov	r2, r8
 800301a:	189b      	adds	r3, r3, r2
 800301c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003020:	464b      	mov	r3, r9
 8003022:	460a      	mov	r2, r1
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003044:	4649      	mov	r1, r9
 8003046:	008b      	lsls	r3, r1, #2
 8003048:	4641      	mov	r1, r8
 800304a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304e:	4641      	mov	r1, r8
 8003050:	008a      	lsls	r2, r1, #2
 8003052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003056:	f7fd f8d5 	bl	8000204 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4611      	mov	r1, r2
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003062:	fba3 2301 	umull	r2, r3, r3, r1
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2264      	movs	r2, #100	@ 0x64
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	1acb      	subs	r3, r1, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	@ 0x32
 8003074:	4a33      	ldr	r2, [pc, #204]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003080:	441c      	add	r4, r3
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	673b      	str	r3, [r7, #112]	@ 0x70
 800308a:	677a      	str	r2, [r7, #116]	@ 0x74
 800308c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	1891      	adds	r1, r2, r2
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	415b      	adcs	r3, r3
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a0:	4641      	mov	r1, r8
 80030a2:	1851      	adds	r1, r2, r1
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	4649      	mov	r1, r9
 80030a8:	414b      	adcs	r3, r1
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030b8:	4659      	mov	r1, fp
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c2:	4651      	mov	r1, sl
 80030c4:	00ca      	lsls	r2, r1, #3
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	4642      	mov	r2, r8
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030d2:	464b      	mov	r3, r9
 80030d4:	460a      	mov	r2, r1
 80030d6:	eb42 0303 	adc.w	r3, r2, r3
 80030da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80030e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030f4:	4649      	mov	r1, r9
 80030f6:	008b      	lsls	r3, r1, #2
 80030f8:	4641      	mov	r1, r8
 80030fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030fe:	4641      	mov	r1, r8
 8003100:	008a      	lsls	r2, r1, #2
 8003102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003106:	f7fd f87d 	bl	8000204 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	@ 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	3332      	adds	r3, #50	@ 0x32
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4422      	add	r2, r4
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800313e:	46bd      	mov	sp, r7
 8003140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <std>:
 8003148:	2300      	movs	r3, #0
 800314a:	b510      	push	{r4, lr}
 800314c:	4604      	mov	r4, r0
 800314e:	e9c0 3300 	strd	r3, r3, [r0]
 8003152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003156:	6083      	str	r3, [r0, #8]
 8003158:	8181      	strh	r1, [r0, #12]
 800315a:	6643      	str	r3, [r0, #100]	@ 0x64
 800315c:	81c2      	strh	r2, [r0, #14]
 800315e:	6183      	str	r3, [r0, #24]
 8003160:	4619      	mov	r1, r3
 8003162:	2208      	movs	r2, #8
 8003164:	305c      	adds	r0, #92	@ 0x5c
 8003166:	f000 f9e7 	bl	8003538 <memset>
 800316a:	4b0d      	ldr	r3, [pc, #52]	@ (80031a0 <std+0x58>)
 800316c:	6263      	str	r3, [r4, #36]	@ 0x24
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <std+0x5c>)
 8003170:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <std+0x60>)
 8003174:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003176:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <std+0x64>)
 8003178:	6323      	str	r3, [r4, #48]	@ 0x30
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <std+0x68>)
 800317c:	6224      	str	r4, [r4, #32]
 800317e:	429c      	cmp	r4, r3
 8003180:	d006      	beq.n	8003190 <std+0x48>
 8003182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003186:	4294      	cmp	r4, r2
 8003188:	d002      	beq.n	8003190 <std+0x48>
 800318a:	33d0      	adds	r3, #208	@ 0xd0
 800318c:	429c      	cmp	r4, r3
 800318e:	d105      	bne.n	800319c <std+0x54>
 8003190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003198:	f000 ba46 	b.w	8003628 <__retarget_lock_init_recursive>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	08003389 	.word	0x08003389
 80031a4:	080033ab 	.word	0x080033ab
 80031a8:	080033e3 	.word	0x080033e3
 80031ac:	08003407 	.word	0x08003407
 80031b0:	2000011c 	.word	0x2000011c

080031b4 <stdio_exit_handler>:
 80031b4:	4a02      	ldr	r2, [pc, #8]	@ (80031c0 <stdio_exit_handler+0xc>)
 80031b6:	4903      	ldr	r1, [pc, #12]	@ (80031c4 <stdio_exit_handler+0x10>)
 80031b8:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <stdio_exit_handler+0x14>)
 80031ba:	f000 b869 	b.w	8003290 <_fwalk_sglue>
 80031be:	bf00      	nop
 80031c0:	2000000c 	.word	0x2000000c
 80031c4:	08003929 	.word	0x08003929
 80031c8:	2000001c 	.word	0x2000001c

080031cc <cleanup_stdio>:
 80031cc:	6841      	ldr	r1, [r0, #4]
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <cleanup_stdio+0x34>)
 80031d0:	4299      	cmp	r1, r3
 80031d2:	b510      	push	{r4, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	d001      	beq.n	80031dc <cleanup_stdio+0x10>
 80031d8:	f000 fba6 	bl	8003928 <_fflush_r>
 80031dc:	68a1      	ldr	r1, [r4, #8]
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <cleanup_stdio+0x38>)
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <cleanup_stdio+0x1e>
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 fb9f 	bl	8003928 <_fflush_r>
 80031ea:	68e1      	ldr	r1, [r4, #12]
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <cleanup_stdio+0x3c>)
 80031ee:	4299      	cmp	r1, r3
 80031f0:	d004      	beq.n	80031fc <cleanup_stdio+0x30>
 80031f2:	4620      	mov	r0, r4
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f000 bb96 	b.w	8003928 <_fflush_r>
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	bf00      	nop
 8003200:	2000011c 	.word	0x2000011c
 8003204:	20000184 	.word	0x20000184
 8003208:	200001ec 	.word	0x200001ec

0800320c <global_stdio_init.part.0>:
 800320c:	b510      	push	{r4, lr}
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <global_stdio_init.part.0+0x30>)
 8003210:	4c0b      	ldr	r4, [pc, #44]	@ (8003240 <global_stdio_init.part.0+0x34>)
 8003212:	4a0c      	ldr	r2, [pc, #48]	@ (8003244 <global_stdio_init.part.0+0x38>)
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4620      	mov	r0, r4
 8003218:	2200      	movs	r2, #0
 800321a:	2104      	movs	r1, #4
 800321c:	f7ff ff94 	bl	8003148 <std>
 8003220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003224:	2201      	movs	r2, #1
 8003226:	2109      	movs	r1, #9
 8003228:	f7ff ff8e 	bl	8003148 <std>
 800322c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003230:	2202      	movs	r2, #2
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003236:	2112      	movs	r1, #18
 8003238:	f7ff bf86 	b.w	8003148 <std>
 800323c:	20000254 	.word	0x20000254
 8003240:	2000011c 	.word	0x2000011c
 8003244:	080031b5 	.word	0x080031b5

08003248 <__sfp_lock_acquire>:
 8003248:	4801      	ldr	r0, [pc, #4]	@ (8003250 <__sfp_lock_acquire+0x8>)
 800324a:	f000 b9ee 	b.w	800362a <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	2000025d 	.word	0x2000025d

08003254 <__sfp_lock_release>:
 8003254:	4801      	ldr	r0, [pc, #4]	@ (800325c <__sfp_lock_release+0x8>)
 8003256:	f000 b9e9 	b.w	800362c <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	2000025d 	.word	0x2000025d

08003260 <__sinit>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	f7ff fff0 	bl	8003248 <__sfp_lock_acquire>
 8003268:	6a23      	ldr	r3, [r4, #32]
 800326a:	b11b      	cbz	r3, 8003274 <__sinit+0x14>
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003270:	f7ff bff0 	b.w	8003254 <__sfp_lock_release>
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <__sinit+0x28>)
 8003276:	6223      	str	r3, [r4, #32]
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__sinit+0x2c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f5      	bne.n	800326c <__sinit+0xc>
 8003280:	f7ff ffc4 	bl	800320c <global_stdio_init.part.0>
 8003284:	e7f2      	b.n	800326c <__sinit+0xc>
 8003286:	bf00      	nop
 8003288:	080031cd 	.word	0x080031cd
 800328c:	20000254 	.word	0x20000254

08003290 <_fwalk_sglue>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	4607      	mov	r7, r0
 8003296:	4688      	mov	r8, r1
 8003298:	4614      	mov	r4, r2
 800329a:	2600      	movs	r6, #0
 800329c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032a0:	f1b9 0901 	subs.w	r9, r9, #1
 80032a4:	d505      	bpl.n	80032b2 <_fwalk_sglue+0x22>
 80032a6:	6824      	ldr	r4, [r4, #0]
 80032a8:	2c00      	cmp	r4, #0
 80032aa:	d1f7      	bne.n	800329c <_fwalk_sglue+0xc>
 80032ac:	4630      	mov	r0, r6
 80032ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b2:	89ab      	ldrh	r3, [r5, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d907      	bls.n	80032c8 <_fwalk_sglue+0x38>
 80032b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032bc:	3301      	adds	r3, #1
 80032be:	d003      	beq.n	80032c8 <_fwalk_sglue+0x38>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4638      	mov	r0, r7
 80032c4:	47c0      	blx	r8
 80032c6:	4306      	orrs	r6, r0
 80032c8:	3568      	adds	r5, #104	@ 0x68
 80032ca:	e7e9      	b.n	80032a0 <_fwalk_sglue+0x10>

080032cc <_puts_r>:
 80032cc:	6a03      	ldr	r3, [r0, #32]
 80032ce:	b570      	push	{r4, r5, r6, lr}
 80032d0:	6884      	ldr	r4, [r0, #8]
 80032d2:	4605      	mov	r5, r0
 80032d4:	460e      	mov	r6, r1
 80032d6:	b90b      	cbnz	r3, 80032dc <_puts_r+0x10>
 80032d8:	f7ff ffc2 	bl	8003260 <__sinit>
 80032dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032de:	07db      	lsls	r3, r3, #31
 80032e0:	d405      	bmi.n	80032ee <_puts_r+0x22>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	0598      	lsls	r0, r3, #22
 80032e6:	d402      	bmi.n	80032ee <_puts_r+0x22>
 80032e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ea:	f000 f99e 	bl	800362a <__retarget_lock_acquire_recursive>
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	0719      	lsls	r1, r3, #28
 80032f2:	d502      	bpl.n	80032fa <_puts_r+0x2e>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d135      	bne.n	8003366 <_puts_r+0x9a>
 80032fa:	4621      	mov	r1, r4
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 f8c5 	bl	800348c <__swsetup_r>
 8003302:	b380      	cbz	r0, 8003366 <_puts_r+0x9a>
 8003304:	f04f 35ff 	mov.w	r5, #4294967295
 8003308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800330a:	07da      	lsls	r2, r3, #31
 800330c:	d405      	bmi.n	800331a <_puts_r+0x4e>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	059b      	lsls	r3, r3, #22
 8003312:	d402      	bmi.n	800331a <_puts_r+0x4e>
 8003314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003316:	f000 f989 	bl	800362c <__retarget_lock_release_recursive>
 800331a:	4628      	mov	r0, r5
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	2b00      	cmp	r3, #0
 8003320:	da04      	bge.n	800332c <_puts_r+0x60>
 8003322:	69a2      	ldr	r2, [r4, #24]
 8003324:	429a      	cmp	r2, r3
 8003326:	dc17      	bgt.n	8003358 <_puts_r+0x8c>
 8003328:	290a      	cmp	r1, #10
 800332a:	d015      	beq.n	8003358 <_puts_r+0x8c>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	6022      	str	r2, [r4, #0]
 8003332:	7019      	strb	r1, [r3, #0]
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800333a:	3b01      	subs	r3, #1
 800333c:	60a3      	str	r3, [r4, #8]
 800333e:	2900      	cmp	r1, #0
 8003340:	d1ed      	bne.n	800331e <_puts_r+0x52>
 8003342:	2b00      	cmp	r3, #0
 8003344:	da11      	bge.n	800336a <_puts_r+0x9e>
 8003346:	4622      	mov	r2, r4
 8003348:	210a      	movs	r1, #10
 800334a:	4628      	mov	r0, r5
 800334c:	f000 f85f 	bl	800340e <__swbuf_r>
 8003350:	3001      	adds	r0, #1
 8003352:	d0d7      	beq.n	8003304 <_puts_r+0x38>
 8003354:	250a      	movs	r5, #10
 8003356:	e7d7      	b.n	8003308 <_puts_r+0x3c>
 8003358:	4622      	mov	r2, r4
 800335a:	4628      	mov	r0, r5
 800335c:	f000 f857 	bl	800340e <__swbuf_r>
 8003360:	3001      	adds	r0, #1
 8003362:	d1e7      	bne.n	8003334 <_puts_r+0x68>
 8003364:	e7ce      	b.n	8003304 <_puts_r+0x38>
 8003366:	3e01      	subs	r6, #1
 8003368:	e7e4      	b.n	8003334 <_puts_r+0x68>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	220a      	movs	r2, #10
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e7ee      	b.n	8003354 <_puts_r+0x88>
	...

08003378 <puts>:
 8003378:	4b02      	ldr	r3, [pc, #8]	@ (8003384 <puts+0xc>)
 800337a:	4601      	mov	r1, r0
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f7ff bfa5 	b.w	80032cc <_puts_r>
 8003382:	bf00      	nop
 8003384:	20000018 	.word	0x20000018

08003388 <__sread>:
 8003388:	b510      	push	{r4, lr}
 800338a:	460c      	mov	r4, r1
 800338c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003390:	f000 f8fc 	bl	800358c <_read_r>
 8003394:	2800      	cmp	r0, #0
 8003396:	bfab      	itete	ge
 8003398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800339a:	89a3      	ldrhlt	r3, [r4, #12]
 800339c:	181b      	addge	r3, r3, r0
 800339e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033a2:	bfac      	ite	ge
 80033a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033a6:	81a3      	strhlt	r3, [r4, #12]
 80033a8:	bd10      	pop	{r4, pc}

080033aa <__swrite>:
 80033aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ae:	461f      	mov	r7, r3
 80033b0:	898b      	ldrh	r3, [r1, #12]
 80033b2:	05db      	lsls	r3, r3, #23
 80033b4:	4605      	mov	r5, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	4616      	mov	r6, r2
 80033ba:	d505      	bpl.n	80033c8 <__swrite+0x1e>
 80033bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c0:	2302      	movs	r3, #2
 80033c2:	2200      	movs	r2, #0
 80033c4:	f000 f8d0 	bl	8003568 <_lseek_r>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	4632      	mov	r2, r6
 80033d6:	463b      	mov	r3, r7
 80033d8:	4628      	mov	r0, r5
 80033da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033de:	f000 b8e7 	b.w	80035b0 <_write_r>

080033e2 <__sseek>:
 80033e2:	b510      	push	{r4, lr}
 80033e4:	460c      	mov	r4, r1
 80033e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ea:	f000 f8bd 	bl	8003568 <_lseek_r>
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	bf15      	itete	ne
 80033f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033fe:	81a3      	strheq	r3, [r4, #12]
 8003400:	bf18      	it	ne
 8003402:	81a3      	strhne	r3, [r4, #12]
 8003404:	bd10      	pop	{r4, pc}

08003406 <__sclose>:
 8003406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800340a:	f000 b89d 	b.w	8003548 <_close_r>

0800340e <__swbuf_r>:
 800340e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003410:	460e      	mov	r6, r1
 8003412:	4614      	mov	r4, r2
 8003414:	4605      	mov	r5, r0
 8003416:	b118      	cbz	r0, 8003420 <__swbuf_r+0x12>
 8003418:	6a03      	ldr	r3, [r0, #32]
 800341a:	b90b      	cbnz	r3, 8003420 <__swbuf_r+0x12>
 800341c:	f7ff ff20 	bl	8003260 <__sinit>
 8003420:	69a3      	ldr	r3, [r4, #24]
 8003422:	60a3      	str	r3, [r4, #8]
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	071a      	lsls	r2, r3, #28
 8003428:	d501      	bpl.n	800342e <__swbuf_r+0x20>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	b943      	cbnz	r3, 8003440 <__swbuf_r+0x32>
 800342e:	4621      	mov	r1, r4
 8003430:	4628      	mov	r0, r5
 8003432:	f000 f82b 	bl	800348c <__swsetup_r>
 8003436:	b118      	cbz	r0, 8003440 <__swbuf_r+0x32>
 8003438:	f04f 37ff 	mov.w	r7, #4294967295
 800343c:	4638      	mov	r0, r7
 800343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	6922      	ldr	r2, [r4, #16]
 8003444:	1a98      	subs	r0, r3, r2
 8003446:	6963      	ldr	r3, [r4, #20]
 8003448:	b2f6      	uxtb	r6, r6
 800344a:	4283      	cmp	r3, r0
 800344c:	4637      	mov	r7, r6
 800344e:	dc05      	bgt.n	800345c <__swbuf_r+0x4e>
 8003450:	4621      	mov	r1, r4
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fa68 	bl	8003928 <_fflush_r>
 8003458:	2800      	cmp	r0, #0
 800345a:	d1ed      	bne.n	8003438 <__swbuf_r+0x2a>
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	3b01      	subs	r3, #1
 8003460:	60a3      	str	r3, [r4, #8]
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	701e      	strb	r6, [r3, #0]
 800346a:	6962      	ldr	r2, [r4, #20]
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	429a      	cmp	r2, r3
 8003470:	d004      	beq.n	800347c <__swbuf_r+0x6e>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	07db      	lsls	r3, r3, #31
 8003476:	d5e1      	bpl.n	800343c <__swbuf_r+0x2e>
 8003478:	2e0a      	cmp	r6, #10
 800347a:	d1df      	bne.n	800343c <__swbuf_r+0x2e>
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fa52 	bl	8003928 <_fflush_r>
 8003484:	2800      	cmp	r0, #0
 8003486:	d0d9      	beq.n	800343c <__swbuf_r+0x2e>
 8003488:	e7d6      	b.n	8003438 <__swbuf_r+0x2a>
	...

0800348c <__swsetup_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <__swsetup_r+0xa8>)
 8003490:	4605      	mov	r5, r0
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	460c      	mov	r4, r1
 8003496:	b118      	cbz	r0, 80034a0 <__swsetup_r+0x14>
 8003498:	6a03      	ldr	r3, [r0, #32]
 800349a:	b90b      	cbnz	r3, 80034a0 <__swsetup_r+0x14>
 800349c:	f7ff fee0 	bl	8003260 <__sinit>
 80034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a4:	0719      	lsls	r1, r3, #28
 80034a6:	d422      	bmi.n	80034ee <__swsetup_r+0x62>
 80034a8:	06da      	lsls	r2, r3, #27
 80034aa:	d407      	bmi.n	80034bc <__swsetup_r+0x30>
 80034ac:	2209      	movs	r2, #9
 80034ae:	602a      	str	r2, [r5, #0]
 80034b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ba:	e033      	b.n	8003524 <__swsetup_r+0x98>
 80034bc:	0758      	lsls	r0, r3, #29
 80034be:	d512      	bpl.n	80034e6 <__swsetup_r+0x5a>
 80034c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034c2:	b141      	cbz	r1, 80034d6 <__swsetup_r+0x4a>
 80034c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034c8:	4299      	cmp	r1, r3
 80034ca:	d002      	beq.n	80034d2 <__swsetup_r+0x46>
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 f8af 	bl	8003630 <_free_r>
 80034d2:	2300      	movs	r3, #0
 80034d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80034dc:	81a3      	strh	r3, [r4, #12]
 80034de:	2300      	movs	r3, #0
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	6923      	ldr	r3, [r4, #16]
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	b94b      	cbnz	r3, 8003506 <__swsetup_r+0x7a>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fc:	d003      	beq.n	8003506 <__swsetup_r+0x7a>
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 fa5f 	bl	80039c4 <__smakebuf_r>
 8003506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800350a:	f013 0201 	ands.w	r2, r3, #1
 800350e:	d00a      	beq.n	8003526 <__swsetup_r+0x9a>
 8003510:	2200      	movs	r2, #0
 8003512:	60a2      	str	r2, [r4, #8]
 8003514:	6962      	ldr	r2, [r4, #20]
 8003516:	4252      	negs	r2, r2
 8003518:	61a2      	str	r2, [r4, #24]
 800351a:	6922      	ldr	r2, [r4, #16]
 800351c:	b942      	cbnz	r2, 8003530 <__swsetup_r+0xa4>
 800351e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003522:	d1c5      	bne.n	80034b0 <__swsetup_r+0x24>
 8003524:	bd38      	pop	{r3, r4, r5, pc}
 8003526:	0799      	lsls	r1, r3, #30
 8003528:	bf58      	it	pl
 800352a:	6962      	ldrpl	r2, [r4, #20]
 800352c:	60a2      	str	r2, [r4, #8]
 800352e:	e7f4      	b.n	800351a <__swsetup_r+0x8e>
 8003530:	2000      	movs	r0, #0
 8003532:	e7f7      	b.n	8003524 <__swsetup_r+0x98>
 8003534:	20000018 	.word	0x20000018

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_close_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d06      	ldr	r5, [pc, #24]	@ (8003564 <_close_r+0x1c>)
 800354c:	2300      	movs	r3, #0
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	f7fd fb44 	bl	8000be0 <_close>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_close_r+0x1a>
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	b103      	cbz	r3, 8003562 <_close_r+0x1a>
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	20000258 	.word	0x20000258

08003568 <_lseek_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4d07      	ldr	r5, [pc, #28]	@ (8003588 <_lseek_r+0x20>)
 800356c:	4604      	mov	r4, r0
 800356e:	4608      	mov	r0, r1
 8003570:	4611      	mov	r1, r2
 8003572:	2200      	movs	r2, #0
 8003574:	602a      	str	r2, [r5, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	f7fd fb59 	bl	8000c2e <_lseek>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d102      	bne.n	8003586 <_lseek_r+0x1e>
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	b103      	cbz	r3, 8003586 <_lseek_r+0x1e>
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	20000258 	.word	0x20000258

0800358c <_read_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4d07      	ldr	r5, [pc, #28]	@ (80035ac <_read_r+0x20>)
 8003590:	4604      	mov	r4, r0
 8003592:	4608      	mov	r0, r1
 8003594:	4611      	mov	r1, r2
 8003596:	2200      	movs	r2, #0
 8003598:	602a      	str	r2, [r5, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f7fd fae7 	bl	8000b6e <_read>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d102      	bne.n	80035aa <_read_r+0x1e>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	b103      	cbz	r3, 80035aa <_read_r+0x1e>
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	20000258 	.word	0x20000258

080035b0 <_write_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4d07      	ldr	r5, [pc, #28]	@ (80035d0 <_write_r+0x20>)
 80035b4:	4604      	mov	r4, r0
 80035b6:	4608      	mov	r0, r1
 80035b8:	4611      	mov	r1, r2
 80035ba:	2200      	movs	r2, #0
 80035bc:	602a      	str	r2, [r5, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f7fd faf2 	bl	8000ba8 <_write>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_write_r+0x1e>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_write_r+0x1e>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000258 	.word	0x20000258

080035d4 <__errno>:
 80035d4:	4b01      	ldr	r3, [pc, #4]	@ (80035dc <__errno+0x8>)
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000018 	.word	0x20000018

080035e0 <__libc_init_array>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003618 <__libc_init_array+0x38>)
 80035e4:	4c0d      	ldr	r4, [pc, #52]	@ (800361c <__libc_init_array+0x3c>)
 80035e6:	1b64      	subs	r4, r4, r5
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	2600      	movs	r6, #0
 80035ec:	42a6      	cmp	r6, r4
 80035ee:	d109      	bne.n	8003604 <__libc_init_array+0x24>
 80035f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003620 <__libc_init_array+0x40>)
 80035f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003624 <__libc_init_array+0x44>)
 80035f4:	f000 fa54 	bl	8003aa0 <_init>
 80035f8:	1b64      	subs	r4, r4, r5
 80035fa:	10a4      	asrs	r4, r4, #2
 80035fc:	2600      	movs	r6, #0
 80035fe:	42a6      	cmp	r6, r4
 8003600:	d105      	bne.n	800360e <__libc_init_array+0x2e>
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	f855 3b04 	ldr.w	r3, [r5], #4
 8003608:	4798      	blx	r3
 800360a:	3601      	adds	r6, #1
 800360c:	e7ee      	b.n	80035ec <__libc_init_array+0xc>
 800360e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003612:	4798      	blx	r3
 8003614:	3601      	adds	r6, #1
 8003616:	e7f2      	b.n	80035fe <__libc_init_array+0x1e>
 8003618:	08003ae0 	.word	0x08003ae0
 800361c:	08003ae0 	.word	0x08003ae0
 8003620:	08003ae0 	.word	0x08003ae0
 8003624:	08003ae4 	.word	0x08003ae4

08003628 <__retarget_lock_init_recursive>:
 8003628:	4770      	bx	lr

0800362a <__retarget_lock_acquire_recursive>:
 800362a:	4770      	bx	lr

0800362c <__retarget_lock_release_recursive>:
 800362c:	4770      	bx	lr
	...

08003630 <_free_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4605      	mov	r5, r0
 8003634:	2900      	cmp	r1, #0
 8003636:	d041      	beq.n	80036bc <_free_r+0x8c>
 8003638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800363c:	1f0c      	subs	r4, r1, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	bfb8      	it	lt
 8003642:	18e4      	addlt	r4, r4, r3
 8003644:	f000 f8e0 	bl	8003808 <__malloc_lock>
 8003648:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <_free_r+0x90>)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	b933      	cbnz	r3, 800365c <_free_r+0x2c>
 800364e:	6063      	str	r3, [r4, #4]
 8003650:	6014      	str	r4, [r2, #0]
 8003652:	4628      	mov	r0, r5
 8003654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003658:	f000 b8dc 	b.w	8003814 <__malloc_unlock>
 800365c:	42a3      	cmp	r3, r4
 800365e:	d908      	bls.n	8003672 <_free_r+0x42>
 8003660:	6820      	ldr	r0, [r4, #0]
 8003662:	1821      	adds	r1, r4, r0
 8003664:	428b      	cmp	r3, r1
 8003666:	bf01      	itttt	eq
 8003668:	6819      	ldreq	r1, [r3, #0]
 800366a:	685b      	ldreq	r3, [r3, #4]
 800366c:	1809      	addeq	r1, r1, r0
 800366e:	6021      	streq	r1, [r4, #0]
 8003670:	e7ed      	b.n	800364e <_free_r+0x1e>
 8003672:	461a      	mov	r2, r3
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b10b      	cbz	r3, 800367c <_free_r+0x4c>
 8003678:	42a3      	cmp	r3, r4
 800367a:	d9fa      	bls.n	8003672 <_free_r+0x42>
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	1850      	adds	r0, r2, r1
 8003680:	42a0      	cmp	r0, r4
 8003682:	d10b      	bne.n	800369c <_free_r+0x6c>
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	4401      	add	r1, r0
 8003688:	1850      	adds	r0, r2, r1
 800368a:	4283      	cmp	r3, r0
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	d1e0      	bne.n	8003652 <_free_r+0x22>
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	6053      	str	r3, [r2, #4]
 8003696:	4408      	add	r0, r1
 8003698:	6010      	str	r0, [r2, #0]
 800369a:	e7da      	b.n	8003652 <_free_r+0x22>
 800369c:	d902      	bls.n	80036a4 <_free_r+0x74>
 800369e:	230c      	movs	r3, #12
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	e7d6      	b.n	8003652 <_free_r+0x22>
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	1821      	adds	r1, r4, r0
 80036a8:	428b      	cmp	r3, r1
 80036aa:	bf04      	itt	eq
 80036ac:	6819      	ldreq	r1, [r3, #0]
 80036ae:	685b      	ldreq	r3, [r3, #4]
 80036b0:	6063      	str	r3, [r4, #4]
 80036b2:	bf04      	itt	eq
 80036b4:	1809      	addeq	r1, r1, r0
 80036b6:	6021      	streq	r1, [r4, #0]
 80036b8:	6054      	str	r4, [r2, #4]
 80036ba:	e7ca      	b.n	8003652 <_free_r+0x22>
 80036bc:	bd38      	pop	{r3, r4, r5, pc}
 80036be:	bf00      	nop
 80036c0:	20000264 	.word	0x20000264

080036c4 <sbrk_aligned>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003704 <sbrk_aligned+0x40>)
 80036c8:	460c      	mov	r4, r1
 80036ca:	6831      	ldr	r1, [r6, #0]
 80036cc:	4605      	mov	r5, r0
 80036ce:	b911      	cbnz	r1, 80036d6 <sbrk_aligned+0x12>
 80036d0:	f000 f9d6 	bl	8003a80 <_sbrk_r>
 80036d4:	6030      	str	r0, [r6, #0]
 80036d6:	4621      	mov	r1, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f9d1 	bl	8003a80 <_sbrk_r>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d103      	bne.n	80036ea <sbrk_aligned+0x26>
 80036e2:	f04f 34ff 	mov.w	r4, #4294967295
 80036e6:	4620      	mov	r0, r4
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	1cc4      	adds	r4, r0, #3
 80036ec:	f024 0403 	bic.w	r4, r4, #3
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d0f8      	beq.n	80036e6 <sbrk_aligned+0x22>
 80036f4:	1a21      	subs	r1, r4, r0
 80036f6:	4628      	mov	r0, r5
 80036f8:	f000 f9c2 	bl	8003a80 <_sbrk_r>
 80036fc:	3001      	adds	r0, #1
 80036fe:	d1f2      	bne.n	80036e6 <sbrk_aligned+0x22>
 8003700:	e7ef      	b.n	80036e2 <sbrk_aligned+0x1e>
 8003702:	bf00      	nop
 8003704:	20000260 	.word	0x20000260

08003708 <_malloc_r>:
 8003708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800370c:	1ccd      	adds	r5, r1, #3
 800370e:	f025 0503 	bic.w	r5, r5, #3
 8003712:	3508      	adds	r5, #8
 8003714:	2d0c      	cmp	r5, #12
 8003716:	bf38      	it	cc
 8003718:	250c      	movcc	r5, #12
 800371a:	2d00      	cmp	r5, #0
 800371c:	4606      	mov	r6, r0
 800371e:	db01      	blt.n	8003724 <_malloc_r+0x1c>
 8003720:	42a9      	cmp	r1, r5
 8003722:	d904      	bls.n	800372e <_malloc_r+0x26>
 8003724:	230c      	movs	r3, #12
 8003726:	6033      	str	r3, [r6, #0]
 8003728:	2000      	movs	r0, #0
 800372a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800372e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003804 <_malloc_r+0xfc>
 8003732:	f000 f869 	bl	8003808 <__malloc_lock>
 8003736:	f8d8 3000 	ldr.w	r3, [r8]
 800373a:	461c      	mov	r4, r3
 800373c:	bb44      	cbnz	r4, 8003790 <_malloc_r+0x88>
 800373e:	4629      	mov	r1, r5
 8003740:	4630      	mov	r0, r6
 8003742:	f7ff ffbf 	bl	80036c4 <sbrk_aligned>
 8003746:	1c43      	adds	r3, r0, #1
 8003748:	4604      	mov	r4, r0
 800374a:	d158      	bne.n	80037fe <_malloc_r+0xf6>
 800374c:	f8d8 4000 	ldr.w	r4, [r8]
 8003750:	4627      	mov	r7, r4
 8003752:	2f00      	cmp	r7, #0
 8003754:	d143      	bne.n	80037de <_malloc_r+0xd6>
 8003756:	2c00      	cmp	r4, #0
 8003758:	d04b      	beq.n	80037f2 <_malloc_r+0xea>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	4639      	mov	r1, r7
 800375e:	4630      	mov	r0, r6
 8003760:	eb04 0903 	add.w	r9, r4, r3
 8003764:	f000 f98c 	bl	8003a80 <_sbrk_r>
 8003768:	4581      	cmp	r9, r0
 800376a:	d142      	bne.n	80037f2 <_malloc_r+0xea>
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	1a6d      	subs	r5, r5, r1
 8003770:	4629      	mov	r1, r5
 8003772:	4630      	mov	r0, r6
 8003774:	f7ff ffa6 	bl	80036c4 <sbrk_aligned>
 8003778:	3001      	adds	r0, #1
 800377a:	d03a      	beq.n	80037f2 <_malloc_r+0xea>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	442b      	add	r3, r5
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	f8d8 3000 	ldr.w	r3, [r8]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	bb62      	cbnz	r2, 80037e4 <_malloc_r+0xdc>
 800378a:	f8c8 7000 	str.w	r7, [r8]
 800378e:	e00f      	b.n	80037b0 <_malloc_r+0xa8>
 8003790:	6822      	ldr	r2, [r4, #0]
 8003792:	1b52      	subs	r2, r2, r5
 8003794:	d420      	bmi.n	80037d8 <_malloc_r+0xd0>
 8003796:	2a0b      	cmp	r2, #11
 8003798:	d917      	bls.n	80037ca <_malloc_r+0xc2>
 800379a:	1961      	adds	r1, r4, r5
 800379c:	42a3      	cmp	r3, r4
 800379e:	6025      	str	r5, [r4, #0]
 80037a0:	bf18      	it	ne
 80037a2:	6059      	strne	r1, [r3, #4]
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	bf08      	it	eq
 80037a8:	f8c8 1000 	streq.w	r1, [r8]
 80037ac:	5162      	str	r2, [r4, r5]
 80037ae:	604b      	str	r3, [r1, #4]
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f82f 	bl	8003814 <__malloc_unlock>
 80037b6:	f104 000b 	add.w	r0, r4, #11
 80037ba:	1d23      	adds	r3, r4, #4
 80037bc:	f020 0007 	bic.w	r0, r0, #7
 80037c0:	1ac2      	subs	r2, r0, r3
 80037c2:	bf1c      	itt	ne
 80037c4:	1a1b      	subne	r3, r3, r0
 80037c6:	50a3      	strne	r3, [r4, r2]
 80037c8:	e7af      	b.n	800372a <_malloc_r+0x22>
 80037ca:	6862      	ldr	r2, [r4, #4]
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	bf0c      	ite	eq
 80037d0:	f8c8 2000 	streq.w	r2, [r8]
 80037d4:	605a      	strne	r2, [r3, #4]
 80037d6:	e7eb      	b.n	80037b0 <_malloc_r+0xa8>
 80037d8:	4623      	mov	r3, r4
 80037da:	6864      	ldr	r4, [r4, #4]
 80037dc:	e7ae      	b.n	800373c <_malloc_r+0x34>
 80037de:	463c      	mov	r4, r7
 80037e0:	687f      	ldr	r7, [r7, #4]
 80037e2:	e7b6      	b.n	8003752 <_malloc_r+0x4a>
 80037e4:	461a      	mov	r2, r3
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d1fb      	bne.n	80037e4 <_malloc_r+0xdc>
 80037ec:	2300      	movs	r3, #0
 80037ee:	6053      	str	r3, [r2, #4]
 80037f0:	e7de      	b.n	80037b0 <_malloc_r+0xa8>
 80037f2:	230c      	movs	r3, #12
 80037f4:	6033      	str	r3, [r6, #0]
 80037f6:	4630      	mov	r0, r6
 80037f8:	f000 f80c 	bl	8003814 <__malloc_unlock>
 80037fc:	e794      	b.n	8003728 <_malloc_r+0x20>
 80037fe:	6005      	str	r5, [r0, #0]
 8003800:	e7d6      	b.n	80037b0 <_malloc_r+0xa8>
 8003802:	bf00      	nop
 8003804:	20000264 	.word	0x20000264

08003808 <__malloc_lock>:
 8003808:	4801      	ldr	r0, [pc, #4]	@ (8003810 <__malloc_lock+0x8>)
 800380a:	f7ff bf0e 	b.w	800362a <__retarget_lock_acquire_recursive>
 800380e:	bf00      	nop
 8003810:	2000025c 	.word	0x2000025c

08003814 <__malloc_unlock>:
 8003814:	4801      	ldr	r0, [pc, #4]	@ (800381c <__malloc_unlock+0x8>)
 8003816:	f7ff bf09 	b.w	800362c <__retarget_lock_release_recursive>
 800381a:	bf00      	nop
 800381c:	2000025c 	.word	0x2000025c

08003820 <__sflush_r>:
 8003820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003828:	0716      	lsls	r6, r2, #28
 800382a:	4605      	mov	r5, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d454      	bmi.n	80038da <__sflush_r+0xba>
 8003830:	684b      	ldr	r3, [r1, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	dc02      	bgt.n	800383c <__sflush_r+0x1c>
 8003836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	dd48      	ble.n	80038ce <__sflush_r+0xae>
 800383c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800383e:	2e00      	cmp	r6, #0
 8003840:	d045      	beq.n	80038ce <__sflush_r+0xae>
 8003842:	2300      	movs	r3, #0
 8003844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003848:	682f      	ldr	r7, [r5, #0]
 800384a:	6a21      	ldr	r1, [r4, #32]
 800384c:	602b      	str	r3, [r5, #0]
 800384e:	d030      	beq.n	80038b2 <__sflush_r+0x92>
 8003850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	0759      	lsls	r1, r3, #29
 8003856:	d505      	bpl.n	8003864 <__sflush_r+0x44>
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800385e:	b10b      	cbz	r3, 8003864 <__sflush_r+0x44>
 8003860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003862:	1ad2      	subs	r2, r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003868:	6a21      	ldr	r1, [r4, #32]
 800386a:	4628      	mov	r0, r5
 800386c:	47b0      	blx	r6
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	d106      	bne.n	8003882 <__sflush_r+0x62>
 8003874:	6829      	ldr	r1, [r5, #0]
 8003876:	291d      	cmp	r1, #29
 8003878:	d82b      	bhi.n	80038d2 <__sflush_r+0xb2>
 800387a:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <__sflush_r+0x104>)
 800387c:	40ca      	lsrs	r2, r1
 800387e:	07d6      	lsls	r6, r2, #31
 8003880:	d527      	bpl.n	80038d2 <__sflush_r+0xb2>
 8003882:	2200      	movs	r2, #0
 8003884:	6062      	str	r2, [r4, #4]
 8003886:	04d9      	lsls	r1, r3, #19
 8003888:	6922      	ldr	r2, [r4, #16]
 800388a:	6022      	str	r2, [r4, #0]
 800388c:	d504      	bpl.n	8003898 <__sflush_r+0x78>
 800388e:	1c42      	adds	r2, r0, #1
 8003890:	d101      	bne.n	8003896 <__sflush_r+0x76>
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	b903      	cbnz	r3, 8003898 <__sflush_r+0x78>
 8003896:	6560      	str	r0, [r4, #84]	@ 0x54
 8003898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800389a:	602f      	str	r7, [r5, #0]
 800389c:	b1b9      	cbz	r1, 80038ce <__sflush_r+0xae>
 800389e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038a2:	4299      	cmp	r1, r3
 80038a4:	d002      	beq.n	80038ac <__sflush_r+0x8c>
 80038a6:	4628      	mov	r0, r5
 80038a8:	f7ff fec2 	bl	8003630 <_free_r>
 80038ac:	2300      	movs	r3, #0
 80038ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80038b0:	e00d      	b.n	80038ce <__sflush_r+0xae>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	4602      	mov	r2, r0
 80038ba:	1c50      	adds	r0, r2, #1
 80038bc:	d1c9      	bne.n	8003852 <__sflush_r+0x32>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0c6      	beq.n	8003852 <__sflush_r+0x32>
 80038c4:	2b1d      	cmp	r3, #29
 80038c6:	d001      	beq.n	80038cc <__sflush_r+0xac>
 80038c8:	2b16      	cmp	r3, #22
 80038ca:	d11e      	bne.n	800390a <__sflush_r+0xea>
 80038cc:	602f      	str	r7, [r5, #0]
 80038ce:	2000      	movs	r0, #0
 80038d0:	e022      	b.n	8003918 <__sflush_r+0xf8>
 80038d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d6:	b21b      	sxth	r3, r3
 80038d8:	e01b      	b.n	8003912 <__sflush_r+0xf2>
 80038da:	690f      	ldr	r7, [r1, #16]
 80038dc:	2f00      	cmp	r7, #0
 80038de:	d0f6      	beq.n	80038ce <__sflush_r+0xae>
 80038e0:	0793      	lsls	r3, r2, #30
 80038e2:	680e      	ldr	r6, [r1, #0]
 80038e4:	bf08      	it	eq
 80038e6:	694b      	ldreq	r3, [r1, #20]
 80038e8:	600f      	str	r7, [r1, #0]
 80038ea:	bf18      	it	ne
 80038ec:	2300      	movne	r3, #0
 80038ee:	eba6 0807 	sub.w	r8, r6, r7
 80038f2:	608b      	str	r3, [r1, #8]
 80038f4:	f1b8 0f00 	cmp.w	r8, #0
 80038f8:	dde9      	ble.n	80038ce <__sflush_r+0xae>
 80038fa:	6a21      	ldr	r1, [r4, #32]
 80038fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80038fe:	4643      	mov	r3, r8
 8003900:	463a      	mov	r2, r7
 8003902:	4628      	mov	r0, r5
 8003904:	47b0      	blx	r6
 8003906:	2800      	cmp	r0, #0
 8003908:	dc08      	bgt.n	800391c <__sflush_r+0xfc>
 800390a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800391c:	4407      	add	r7, r0
 800391e:	eba8 0800 	sub.w	r8, r8, r0
 8003922:	e7e7      	b.n	80038f4 <__sflush_r+0xd4>
 8003924:	20400001 	.word	0x20400001

08003928 <_fflush_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	690b      	ldr	r3, [r1, #16]
 800392c:	4605      	mov	r5, r0
 800392e:	460c      	mov	r4, r1
 8003930:	b913      	cbnz	r3, 8003938 <_fflush_r+0x10>
 8003932:	2500      	movs	r5, #0
 8003934:	4628      	mov	r0, r5
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	b118      	cbz	r0, 8003942 <_fflush_r+0x1a>
 800393a:	6a03      	ldr	r3, [r0, #32]
 800393c:	b90b      	cbnz	r3, 8003942 <_fflush_r+0x1a>
 800393e:	f7ff fc8f 	bl	8003260 <__sinit>
 8003942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f3      	beq.n	8003932 <_fflush_r+0xa>
 800394a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800394c:	07d0      	lsls	r0, r2, #31
 800394e:	d404      	bmi.n	800395a <_fflush_r+0x32>
 8003950:	0599      	lsls	r1, r3, #22
 8003952:	d402      	bmi.n	800395a <_fflush_r+0x32>
 8003954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003956:	f7ff fe68 	bl	800362a <__retarget_lock_acquire_recursive>
 800395a:	4628      	mov	r0, r5
 800395c:	4621      	mov	r1, r4
 800395e:	f7ff ff5f 	bl	8003820 <__sflush_r>
 8003962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003964:	07da      	lsls	r2, r3, #31
 8003966:	4605      	mov	r5, r0
 8003968:	d4e4      	bmi.n	8003934 <_fflush_r+0xc>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	d4e1      	bmi.n	8003934 <_fflush_r+0xc>
 8003970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003972:	f7ff fe5b 	bl	800362c <__retarget_lock_release_recursive>
 8003976:	e7dd      	b.n	8003934 <_fflush_r+0xc>

08003978 <__swhatbuf_r>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	460c      	mov	r4, r1
 800397c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003980:	2900      	cmp	r1, #0
 8003982:	b096      	sub	sp, #88	@ 0x58
 8003984:	4615      	mov	r5, r2
 8003986:	461e      	mov	r6, r3
 8003988:	da0d      	bge.n	80039a6 <__swhatbuf_r+0x2e>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	bf14      	ite	ne
 8003996:	2340      	movne	r3, #64	@ 0x40
 8003998:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800399c:	2000      	movs	r0, #0
 800399e:	6031      	str	r1, [r6, #0]
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	b016      	add	sp, #88	@ 0x58
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	466a      	mov	r2, sp
 80039a8:	f000 f848 	bl	8003a3c <_fstat_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	dbec      	blt.n	800398a <__swhatbuf_r+0x12>
 80039b0:	9901      	ldr	r1, [sp, #4]
 80039b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80039ba:	4259      	negs	r1, r3
 80039bc:	4159      	adcs	r1, r3
 80039be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039c2:	e7eb      	b.n	800399c <__swhatbuf_r+0x24>

080039c4 <__smakebuf_r>:
 80039c4:	898b      	ldrh	r3, [r1, #12]
 80039c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c8:	079d      	lsls	r5, r3, #30
 80039ca:	4606      	mov	r6, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	d507      	bpl.n	80039e0 <__smakebuf_r+0x1c>
 80039d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	2301      	movs	r3, #1
 80039da:	6163      	str	r3, [r4, #20]
 80039dc:	b003      	add	sp, #12
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e0:	ab01      	add	r3, sp, #4
 80039e2:	466a      	mov	r2, sp
 80039e4:	f7ff ffc8 	bl	8003978 <__swhatbuf_r>
 80039e8:	9f00      	ldr	r7, [sp, #0]
 80039ea:	4605      	mov	r5, r0
 80039ec:	4639      	mov	r1, r7
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7ff fe8a 	bl	8003708 <_malloc_r>
 80039f4:	b948      	cbnz	r0, 8003a0a <__smakebuf_r+0x46>
 80039f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fa:	059a      	lsls	r2, r3, #22
 80039fc:	d4ee      	bmi.n	80039dc <__smakebuf_r+0x18>
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	e7e2      	b.n	80039d0 <__smakebuf_r+0xc>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	6020      	str	r0, [r4, #0]
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	9b01      	ldr	r3, [sp, #4]
 8003a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a1a:	b15b      	cbz	r3, 8003a34 <__smakebuf_r+0x70>
 8003a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a20:	4630      	mov	r0, r6
 8003a22:	f000 f81d 	bl	8003a60 <_isatty_r>
 8003a26:	b128      	cbz	r0, 8003a34 <__smakebuf_r+0x70>
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	431d      	orrs	r5, r3
 8003a38:	81a5      	strh	r5, [r4, #12]
 8003a3a:	e7cf      	b.n	80039dc <__smakebuf_r+0x18>

08003a3c <_fstat_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4d07      	ldr	r5, [pc, #28]	@ (8003a5c <_fstat_r+0x20>)
 8003a40:	2300      	movs	r3, #0
 8003a42:	4604      	mov	r4, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	f7fd f8d5 	bl	8000bf8 <_fstat>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d102      	bne.n	8003a58 <_fstat_r+0x1c>
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	b103      	cbz	r3, 8003a58 <_fstat_r+0x1c>
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	bd38      	pop	{r3, r4, r5, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000258 	.word	0x20000258

08003a60 <_isatty_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4d06      	ldr	r5, [pc, #24]	@ (8003a7c <_isatty_r+0x1c>)
 8003a64:	2300      	movs	r3, #0
 8003a66:	4604      	mov	r4, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	f7fd f8d4 	bl	8000c18 <_isatty>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_isatty_r+0x1a>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_isatty_r+0x1a>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	20000258 	.word	0x20000258

08003a80 <_sbrk_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	4d06      	ldr	r5, [pc, #24]	@ (8003a9c <_sbrk_r+0x1c>)
 8003a84:	2300      	movs	r3, #0
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7fd f8dc 	bl	8000c48 <_sbrk>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_sbrk_r+0x1a>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_sbrk_r+0x1a>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000258 	.word	0x20000258

08003aa0 <_init>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr

08003aac <_fini>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr
